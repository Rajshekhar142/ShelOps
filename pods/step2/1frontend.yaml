# Frontend Web Application
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
data:
  # Frontend needs to know where the backend is
  # In production, this would be a proper domain
  API_BASE_URL: "http://backend"  # Uses internal service name
  ENVIRONMENT: "production"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: nginx
        image: myorg/frontend:v1.0.0  # Your frontend image (React build + nginx)
        ports:
        - containerPort: 80
          name: http
        envFrom:
        - configMapRef:
            name: frontend-config
        
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "200m"

---
# Service to expose frontend to the internet
apiVersion: v1
kind: Service
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  type: LoadBalancer  # Creates external load balancer (cloud provider)
  # For local testing, use: type: NodePort
  ports:
  - port: 80          # External port
    targetPort: 80    # Container port
    protocol: TCP
    name: http
  selector:
    app: frontend

---
# Alternative: NodePort for local/on-prem testing
# apiVersion: v1
# kind: Service
# metadata:
#   name: frontend-nodeport
# spec:
#   type: NodePort
#   ports:
#   - port: 80
#     targetPort: 80
#     nodePort: 30080  # Access via http://<node-ip>:30080
#   selector:
#     app: frontend